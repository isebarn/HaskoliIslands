(define (numberStream n)
	(cons-stream n (numberStream (+ n 1)))
)

(define (integerStream)
	(define (builder newStream n)
		(cons-stream n (builder newStream (+ n 1)))
	)
	(builder integerStream 1)
)

(define (oddStream)
	(define (builder newStream n)
		(cons-stream n (builder newStream (+ n 2)))
	)
	(builder oddStream 1)
)

(define (fibonacciStream)
	(define (builder newStream n m)
		(cons-stream (+ n m) (builder newStream m (+ n m)))
	)
	(cons-stream 1 (builder fibonacciStream 0 1))
)
(define (test)
	(define (help n)
		(cons-stream n ((lambda (x) (help x)) (+ 1 n)))
	)
	(help 1)
)


(define (streamPrint streamName n)
	(define (createList streamName newList n)
		(if (= n 0)
			newList
			(createList (stream-cdr streamName) (append newList (list (stream-car streamName))) (- n 1)))
	)
	(createList streamName (list ) n)
)

(streamPrint (numberStream 1) 5)
(streamPrint (integerStream) 5)
(streamPrint (oddStream) 5)
(streamPrint (fibonaccistream) 5)
(streamPrint (test) 5)
